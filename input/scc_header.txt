KCUBESTEPPER_API short   SCC_Open(char const * serialNo);
KCUBESTEPPER_API void   SCC_Close(char const * serialNo);
KCUBESTEPPER_API bool   SCC_CheckConnection(char const * serialNo);
KCUBESTEPPER_API void   SCC_Identify(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetStageType(char const * serialNo, KST_Stages stageId);
KCUBESTEPPER_API short   SCC_GetHardwareInfo(char const * serialNo, char * modelNo, DWORD sizeOfModelNo, WORD * type, WORD * numChannels,
char * notes, DWORD sizeOfNotes, DWORD * firmwareVersion, WORD * hardwareVersion, WORD * modificationState);
KCUBESTEPPER_API short   SCC_GetHardwareInfoBlock(char const * serialNo, TLI_HardwareInformation *hardwareInfo);
KCUBESTEPPER_API DWORD   SCC_GetSoftwareVersion(char const * serialNo);
KCUBESTEPPER_API void   SCC_SetCalibrationFile(char const * serialNo, char const *filename, bool enabled);
KCUBESTEPPER_API bool   SCC_IsCalibrationActive(char const * serialNo);
KCUBESTEPPER_API bool   SCC_GetCalibrationFile(char const * serialNo, char * filename, short sizeOfBuffer);
KCUBESTEPPER_API char   SCC_GetHubBay(char const * serialNo);
KCUBESTEPPER_API bool   SCC_LoadSettings(char const * serialNo);
KCUBESTEPPER_API bool   SCC_LoadNamedSettings(char const * serialNo, char const *settingsName);
KCUBESTEPPER_API bool   SCC_PersistSettings(char const * serialNo);
KCUBESTEPPER_API short   SCC_DisableChannel(char const * serialNo);
KCUBESTEPPER_API short   SCC_EnableChannel(char const * serialNo);
KCUBESTEPPER_API bool   SCC_CanDeviceLockFrontPanel(char const * serialNo);
KCUBESTEPPER_API bool    SCC_GetFrontPanelLocked(char const * serialNo);
KCUBESTEPPER_API short    SCC_RequestFrontPanelLocked(char const * serialNo);
KCUBESTEPPER_API short    SCC_SetFrontPanelLock(char const * serialNo, bool locked);
KCUBESTEPPER_API int   SCC_GetNumberPositions(char const * serialNo);
KCUBESTEPPER_API short   SCC_MoveToPosition(char const * serialNo, int index);
KCUBESTEPPER_API int   SCC_GetPosition(char const * serialNo);
KCUBESTEPPER_API bool   SCC_CanHome(char const * serialNo);
KCUBESTEPPER_API bool   SCC_NeedsHoming(char const * serialNo);
KCUBESTEPPER_API bool   SCC_CanMoveWithoutHomingFirst(char const * serialNo);
KCUBESTEPPER_API short   SCC_Home(char const * serialNo);
KCUBESTEPPER_API void   SCC_ClearMessageQueue(char const * serialNo);
KCUBESTEPPER_API void   SCC_RegisterMessageCallback(char const * serialNo, void(*functionPointer)());
KCUBESTEPPER_API int   SCC_MessageQueueSize(char const * serialNo);
KCUBESTEPPER_API bool   SCC_GetNextMessage(char const * serialNo, WORD * messageType, WORD * messageID, DWORD *messageData);
KCUBESTEPPER_API bool   SCC_WaitForMessage(char const * serialNo, WORD * messageType, WORD * messageID, DWORD *messageData);
KCUBESTEPPER_API short   SCC_RequestHomingParams(char const * serialNo);
KCUBESTEPPER_API unsigned int   SCC_GetHomingVelocity(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetHomingVelocity(char const * serialNo, unsigned int velocity);
KCUBESTEPPER_API short   SCC_MoveRelative(char const * serialNo, int displacement);
KCUBESTEPPER_API short   SCC_RequestJogParams(const char * serialNo);
KCUBESTEPPER_API short   SCC_GetJogMode(char const * serialNo, MOT_JogModes * mode, MOT_StopModes * stopMode);
KCUBESTEPPER_API short   SCC_SetJogMode(char const * serialNo, MOT_JogModes mode, MOT_StopModes stopMode);
KCUBESTEPPER_API unsigned int   SCC_GetJogStepSize(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetJogStepSize(char const * serialNo, unsigned int stepSize);
KCUBESTEPPER_API short   SCC_GetJogVelParams(char const * serialNo, int * acceleration, int * maxVelocity);
KCUBESTEPPER_API short   SCC_SetJogVelParams(char const * serialNo, int acceleration, int maxVelocity);
KCUBESTEPPER_API short   SCC_MoveJog(char const * serialNo, MOT_TravelDirection jogDirection);
KCUBESTEPPER_API short   SCC_RequestVelParams(char const * serialNo);
KCUBESTEPPER_API short   SCC_GetVelParams(char const * serialNo, int * acceleration, int * maxVelocity);
KCUBESTEPPER_API short   SCC_SetVelParams(char const * serialNo, int acceleration, int maxVelocity);
KCUBESTEPPER_API short   SCC_MoveAtVelocity(char const * serialNo, MOT_TravelDirection direction);
KCUBESTEPPER_API void   SCC_SetDirection(char const * serialNo, bool reverse);
KCUBESTEPPER_API short   SCC_StopImmediate(char const * serialNo);
KCUBESTEPPER_API short   SCC_StopProfiled(char const * serialNo);
KCUBESTEPPER_API short   SCC_RequestBacklash(char const * serialNo);
KCUBESTEPPER_API long   SCC_GetBacklash(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetBacklash(char const * serialNo, long distance);
KCUBESTEPPER_API long   SCC_GetPositionCounter(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetPositionCounter(char const * serialNo, long count);
KCUBESTEPPER_API short   SCC_RequestEncoderCounter(char const * serialNo);
KCUBESTEPPER_API long   SCC_GetEncoderCounter(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetEncoderCounter(char const * serialNo, long count);
KCUBESTEPPER_API short   SCC_RequestLimitSwitchParams(char const * serialNo);
KCUBESTEPPER_API short   SCC_GetLimitSwitchParams(char const * serialNo, MOT_LimitSwitchModes * clockwiseHardwareLimit, MOT_LimitSwitchModes * anticlockwiseHardwareLimit, unsigned int * clockwisePosition, unsigned int * anticlockwisePosition, MOT_LimitSwitchSWModes * softLimitMode);
KCUBESTEPPER_API short   SCC_SetLimitSwitchParams(char const * serialNo, MOT_LimitSwitchModes clockwiseHardwareLimit, MOT_LimitSwitchModes anticlockwiseHardwareLimit, unsigned int clockwisePosition, unsigned int anticlockwisePosition, MOT_LimitSwitchSWModes softLimitMode);
KCUBESTEPPER_API MOT_LimitsSoftwareApproachPolicy   SCC_GetSoftLimitMode(char const * serialNo);
KCUBESTEPPER_API void   SCC_SetLimitsSoftwareApproachPolicy(char const * serialNo, MOT_LimitsSoftwareApproachPolicy limitsSoftwareApproachPolicy);
KCUBESTEPPER_API short   SCC_RequestMMIParams(char const * serialNo);
KCUBESTEPPER_API  short   SCC_GetMMIParamsExt(char const * serialNo, KMOT_WheelMode *wheelMode, __int32 *wheelMaxVelocity, __int32 *wheelAcceleration, KMOT_WheelDirectionSense *directionSense,
__int32 *presetPosition1, __int32 *presetPosition2, __int16 *displayIntensity, __int16 *displayTimeout, __int16 *displayDimIntensity);
KCUBESTEPPER_API  short   SCC_GetMMIParams(char const * serialNo, KMOT_WheelMode *wheelMode, __int32 *wheelMaxVelocity, __int32 *wheelAcceleration, KMOT_WheelDirectionSense *directionSense,
__int32 *presetPosition1, __int32 *presetPosition2, __int16 *displayIntensity);
KCUBESTEPPER_API short   SCC_SetMMIParamsExt(char const * serialNo, KMOT_WheelMode wheelMode, __int32 wheelMaxVelocity, __int32 wheelAcceleration, KMOT_WheelDirectionSense directionSense,
__int32 presetPosition1, __int32 presetPosition2, __int16 displayIntensity, __int16 displayTimeout, __int16 displayDimIntensity);
KCUBESTEPPER_API short   SCC_SetMMIParams(char const * serialNo, KMOT_WheelMode wheelMode, __int32 wheelMaxVelocity, __int32 wheelAcceleration, KMOT_WheelDirectionSense directionSense,
__int32 presetPosition1, __int32 presetPosition2, __int16 displayIntensity);
KCUBESTEPPER_API short   SCC_RequestTriggerConfigParams(char const * serialNo);
KCUBESTEPPER_API  short   SCC_GetTriggerConfigParams(char const * serialNo, KMOT_TriggerPortMode *trigger1Mode, KMOT_TriggerPortPolarity *trigger1Polarity, KMOT_TriggerPortMode *trigger2Mode, KMOT_TriggerPortPolarity *trigger2Polarity);
KCUBESTEPPER_API short   SCC_SetTriggerConfigParams(char const * serialNo, KMOT_TriggerPortMode trigger1Mode, KMOT_TriggerPortPolarity trigger1Polarity, KMOT_TriggerPortMode trigger2Mode, KMOT_TriggerPortPolarity trigger2Polarity);
KCUBESTEPPER_API  short   SCC_RequestPosTriggerParams(char const * serialNo);
KCUBESTEPPER_API  short   SCC_GetTriggerParamsParams(char const * serialNo, __int32 *triggerStartPositionFwd, __int32 *triggerIntervalFwd, __int32 *triggerPulseCountFwd,
__int32 *triggerStartPositionRev, __int32 *triggerIntervalRev, __int32 *triggerPulseCountRev,
__int32 *triggerPulseWidth, __int32 *cycleCount);
KCUBESTEPPER_API short   SCC_SetTriggerParamsParams(char const * serialNo, __int32 triggerStartPositionFwd, __int32 triggerIntervalFwd, __int32 triggerPulseCountFwd,
__int32 triggerStartPositionRev, __int32 triggerIntervalRev, __int32 triggerPulseCountRev,
__int32 triggerPulseWidth, __int32 cycleCount);

KCUBESTEPPER_API short   SCC_GetTriggerConfigParamsBlock(char const * serialNo, KMOT_TriggerConfig *triggerConfigParams);
KCUBESTEPPER_API short   SCC_SetTriggerConfigParamsBlock(char const * serialNo, KMOT_TriggerConfig *triggerConfigParams);
KCUBESTEPPER_API short   SCC_GetTriggerParamsParamsBlock(char const * serialNo, KMOT_TriggerParams *triggerParamsParams);
KCUBESTEPPER_API short   SCC_SetTriggerParamsParamsBlock(char const * serialNo, KMOT_TriggerParams *triggerParamsParams);
KCUBESTEPPER_API short   SCC_GetVelParamsBlock(const char * serialNo, MOT_VelocityParameters  *velocityParams);
KCUBESTEPPER_API short   SCC_SetVelParamsBlock(const char * serialNo, MOT_VelocityParameters *velocityParams);
KCUBESTEPPER_API short   SCC_RequestMoveAbsolutePosition(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetMoveAbsolutePosition(const char * serialNo, int position);
KCUBESTEPPER_API int   SCC_GetMoveAbsolutePosition(const char * serialNo);
KCUBESTEPPER_API short   SCC_MoveAbsolute(const char * serialNo);
KCUBESTEPPER_API short   SCC_RequestMoveRelativeDistance(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetMoveRelativeDistance(const char * serialNo, int distance);
KCUBESTEPPER_API int   SCC_GetMoveRelativeDistance(const char * serialNo);
KCUBESTEPPER_API short   SCC_MoveRelativeDistance(const char * serialNo);
KCUBESTEPPER_API short   SCC_GetHomingParamsBlock(const char * serialNo, MOT_HomingParameters *homingParams);
KCUBESTEPPER_API short   SCC_SetHomingParamsBlock(const char * serialNo, MOT_HomingParameters *homingParams);
KCUBESTEPPER_API short   SCC_GetJogParamsBlock(const char * serialNo, MOT_JogParameters *jogParams);
KCUBESTEPPER_API short   SCC_SetJogParamsBlock(const char * serialNo, MOT_JogParameters *jogParams);
KCUBESTEPPER_API short   SCC_GetLimitSwitchParamsBlock(const char * serialNo, MOT_LimitSwitchParameters *limitSwitchParams);
KCUBESTEPPER_API short   SCC_SetLimitSwitchParamsBlock(const char * serialNo, MOT_LimitSwitchParameters *limitSwitchParams);
KCUBESTEPPER_API short   SCC_RequestPowerParams(char const * serialNo);
KCUBESTEPPER_API short   SCC_GetPowerParams(const char * serialNo, MOT_PowerParameters *powerParams);
KCUBESTEPPER_API short   SCC_SetPowerParams(const char * serialNo, MOT_PowerParameters *powerParams);
KCUBESTEPPER_API short   SCC_RequestBowIndex(const char * serialNo);
KCUBESTEPPER_API short   SCC_GetBowIndex(const char * serialNo);
KCUBESTEPPER_API short   SCC_SetBowIndex(const char * serialNo, short bowIndex);
KCUBESTEPPER_API bool   SCC_UsesPIDLoopEncoding(const char * serialNo);
KCUBESTEPPER_API short   SCC_SetPIDLoopEncoderParams(const char * serialNo, MOT_PIDLoopEncoderParams * params);
KCUBESTEPPER_API short   SCC_SetPIDLoopEncoderCoeff(const char * serialNo, double coeff);
KCUBESTEPPER_API short   SCC_RequestPIDLoopEncoderParams(const char * serialNo);
KCUBESTEPPER_API short   SCC_GetPIDLoopEncoderParams(const char * serialNo, MOT_PIDLoopEncoderParams * params);
KCUBESTEPPER_API double   SCC_GetPIDLoopEncoderCoeff(const char * serialNo);
KCUBESTEPPER_API short   SCC_SuspendMoveMessages(char const * serialNo);
KCUBESTEPPER_API short   SCC_ResumeMoveMessages(char const * serialNo);
KCUBESTEPPER_API short   SCC_RequestPosition(char const * serialNo);
KCUBESTEPPER_API short   SCC_RequestStatusBits(char const * serialNo);
KCUBESTEPPER_API DWORD   SCC_GetStatusBits(char const * serialNo);
KCUBESTEPPER_API bool   SCC_StartPolling(char const * serialNo, int milliseconds);
KCUBESTEPPER_API long   SCC_PollingDuration(char const * serialNo);
KCUBESTEPPER_API void   SCC_StopPolling(char const * serialNo);
KCUBESTEPPER_API bool   SCC_TimeSinceLastMsgReceived(char const * serialNo, __int64 &lastUpdateTimeMS);
KCUBESTEPPER_API void   SCC_EnableLastMsgTimer(char const * serialNo, bool enable, __int32 lastMsgTimeout);
KCUBESTEPPER_API bool   SCC_HasLastMsgTimerOverrun(char const * serialNo);
KCUBESTEPPER_API short   SCC_RequestSettings(char const * serialNo);
KCUBESTEPPER_API int   SCC_GetStageAxisMinPos(char const * serialNo);
KCUBESTEPPER_API int   SCC_GetStageAxisMaxPos(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetStageAxisLimits(char const * serialNo, int minPosition, int maxPosition);
KCUBESTEPPER_API short   SCC_SetMotorTravelMode(char const * serialNo, MOT_TravelModes travelMode);
KCUBESTEPPER_API MOT_TravelModes   SCC_GetMotorTravelMode(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetMotorParams(char const * serialNo, long stepsPerRev, long gearBoxRatio, float pitch);
KCUBESTEPPER_API short   SCC_GetMotorParams(char const * serialNo, long *stepsPerRev, long *gearBoxRatio, float *pitch);
KCUBESTEPPER_API short   SCC_SetMotorParamsExt(char const * serialNo, double stepsPerRev, double gearBoxRatio, double pitch);
KCUBESTEPPER_API short   SCC_GetMotorParamsExt(char const * serialNo, double *stepsPerRev, double *gearBoxRatio, double *pitch);
KCUBESTEPPER_API short   SCC_SetMotorVelocityLimits(char const * serialNo, double maxVelocity, double maxAcceleration);
KCUBESTEPPER_API short   SCC_GetMotorVelocityLimits(char const * serialNo, double *maxVelocity, double *maxAcceleration);
KCUBESTEPPER_API short   SCC_ResetRotationModes(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetRotationModes(char const * serialNo, MOT_MovementModes mode, MOT_MovementDirections direction);
KCUBESTEPPER_API short   SCC_SetMotorTravelLimits(char const * serialNo, double minPosition, double maxPosition);
KCUBESTEPPER_API short   SCC_GetMotorTravelLimits(char const * serialNo, double *minPosition, double *maxPosition);
KCUBESTEPPER_API short   SCC_RequestDigitalOutputs(char const * serialNo);
KCUBESTEPPER_API byte   SCC_GetDigitalOutputs(char const * serialNo);
KCUBESTEPPER_API short   SCC_SetDigitalOutputs(char const * serialNo, byte outputsBits);
KCUBESTEPPER_API short   SCC_GetRealValueFromDeviceUnit(char const * serialNo, int device_unit, double *real_unit, int unitType);
KCUBESTEPPER_API short   SCC_GetDeviceUnitFromRealValue(char const * serialNo, double real_unit, int *device_unit, int unitType);